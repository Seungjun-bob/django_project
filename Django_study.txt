[ View ]
선택적으로 다음 기능들을 구현
- Query 문자열 추출 (http://..../secondapp/exam2/?name=승준&address=강남
  1. GET 방식 요청 : request.GET, request.GET['name'], request.GET.get('name'), 
		 request.GET.get('name','기본값')  ->  딕셔너리
		--> 클라이언트에서 받을게 있을떄 request.GET.get 사용
type = request.GET.get('type') -> 타입을 변수로 생성

  2. POST 방식 요청 : request.POST
- 요청 방식을 체크 : request.method 
- 이런저런 서비스 로직(처리 로직)을 구현한다. ex) 회원가입의 뷰 / 장바구니 담기 기능 등
- 템플릿을 통해서 응답 페이지가 구성되도록 처리한다.
- 응답 페이지를 구성하게될 템플릿(HTML)에게 전달할 데이터가 존재하면 딕셔너리에 객체에 담아서 보낸다.

- Query 문자열: 웹 클라이언트에서 웹 서버에게 정보 요청할 때 함께 전달하는 name=value 형식의 문자열
 	        서버에게 무엇을 요청하는지 좀더 구체적으로 정보를 전달할 수 있게 된다.
-----------------------------------------------------------------------------------------------------------------

[ GET과 POST의 차이 ]
     <GET>
     - url 직접 입력
     - GET 방식으로 요청할 때는 Query 문자열 없이 요청할 수도 있고 Query 문자열을 전달하면서도 요청가능
     - <form>, <a>, url 요청하면서도 요청가능
     
     <POST>
     - Query 문자열을 전달하면서 GET 방식으로 요청할 때의 제한사항을 보완하기 위해 POST 요청 방식 추가.
     - POST 요청 방식은 Query 문자열을 전달하면서 요청하는 것만 지원하며 
       <form> 태그를 사용해서 요청하는 것만 가능하다.

-----------------------------------------------------------------------------------------------------------------

[ Template ] 
- 장고에서 제공하는 구문을 이용하여 동적인 처리 구현
  동적 처리가 수행되는 위치에 따라
  서버 - 장고의 템플릿 변수, 장고의 템플릿 태그
  클라이언트 - 자바스크립트
loader.get_template('')

-----------------------------------------------------------------------------------------------------------------

[ HttpResponse ]
1) 특정 페이지가 요청(리퀘스트)되면, 장고는 요청 시 메타데이터를 포함하는 HttpRequest 객체를 생성
2) 장고는 urls.py에서 정의한 특정 View 클래스/함수에 첫 번째 인자로 해당 객체(request)를 전달
3) 해당 View는 결과값을 HttpResponse 혹은 JsonResponse 객체에 담아 전달

-----------------------------------------------------------------------------------------------------------------

[ Render ]
render(전달한 딕셔너리 정보)
render(, 응답에 사용할 파일명, html에 사용할 dictionary개체)
- render는 httpRespose 객체를 반환하는 함수로 template을 context와 엮어 httpResponse로 
  쉽게 반환해 주는 함수임 
- template_name에는 불러오고 싶은 템플릿명을 적음
- context에는 View에서 사용하던 변수(dictionary 자료형)를 html 템플릿에서 전달하는 역할을 함. 
- key 값이 템플릿에서 사용할 변수이름, value값이 파이썬 변수가 됨

-----------------------------------------------------------------------------------------------------------------

[ include ]
- 하위 폴더 url.py을 불러와서 사용하겠다.

-----------------------------------------------------------------------------------------------------------------

[ path ] 

urlpatterns = [
    path(route = '',view = views.index, name='index'),
]

# route
   URL 패턴을 가진 문자열이다.
# view
   Django 에서 일치하는 패턴을 찾으면, HttpRequest 객체를 첫번째 인수로 하고, 경로로 부터 '캡처된' 값을 
   키워드 인수로하여 특정한 view 함수를 호출.
# kwargs
   임의의 키워드 인수들은 목표한 view 에 사전형으로 전달
# name
   URL 에 이름을 지으면, 템플릿을 포함한 Django 어디에서나 명확하게 참조가 가능하다


path('secondapp/', include('secondapp.urls'))                  # studyproject.urls.py
-> path('', views.exam1, name='exam1') 		 # secondapp.urls.py
    # template = loader.get_template('exam1.html')
-> return Httpresponse(template.render(None, request))   # secondapp.views.py

경로 = { 상위url.py -> 하위url.py -> views.py -> def 함수 -> return Httpresponse }